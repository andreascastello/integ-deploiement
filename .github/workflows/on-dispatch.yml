name: CI/CD On Dispatch
on:
  repository_dispatch:
    types: [trigger-ci]

jobs:
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies and run unit/integration tests
        env:
          VITE_REACT_APP_SERVER_URL: ${{ secrets.VITE_REACT_APP_SERVER_URL }}
          VITE_REACT_APP_EXPRESS_API_URL: http://blog-api:8080
        run: |
          npm i
          npm run coverage
          npm run jsdoc
          npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload dist for GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-dist
          path: dist

  docker_and_e2e:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Recreate .env file securely
        run: echo "$ENV_FILE" > .env
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

      - name: Start Docker environment
        run: docker compose -f docker-compose-v4-mongo.yml up -d --build
        working-directory: ./

      - name: Vérifier l'état des services
        run: |
          echo "✅ Services démarrés avec succès"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        working-directory: ./

      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend (http://localhost:8000) to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/public-users > /dev/null 2>&1; do echo "Backend not ready yet..."; sleep 5; done'
          echo "Backend is ready!"
          echo "Waiting for frontend (http://localhost:3000) to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do echo "Frontend not ready yet..."; sleep 5; done'
          echo "Frontend is ready!"
          echo "Waiting for Node.js API (http://localhost:3001) to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3001/api/posts > /dev/null 2>&1; do echo "Node.js API not ready yet..."; sleep 5; done'
          echo "Node.js API is ready!"
        working-directory: ./

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Clean node_modules
        run: rm -rf node_modules
        working-directory: ./

      - name: Fix permissions
        run: |
          sudo chown -R $USER:$USER .
        working-directory: ./

      - name: Install front dependencies
        run: npm ci
        working-directory: ./

      - name: Run Cypress tests against Docker environment
        env:
          VITE_REACT_APP_SERVER_URL: http://localhost:3000
          VITE_REACT_APP_EXPRESS_API_URL: http://localhost:3001
          CYPRESS_BASE_URL: http://localhost:3000/integ-deploiement/
        run: |
          npx cypress install
          npx cypress run --config-file cypress.config.cjs --browser chrome --headless
        working-directory: ./

      - name: Upload Cypress screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  deploy_pages:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Download dist from previous job
        uses: actions/download-artifact@v4
        with:
          name: github-pages-dist
          path: dist

      - name: Install dependencies
        run: npm ci

      - name: Build for GitHub Pages
        run: npm run build
        env:
          VITE_BASE_PATH: /integ-deploiement/
          VITE_REACT_APP_SERVER_URL: ${{ secrets.VITE_REACT_APP_SERVER_URL }}
          VITE_REACT_APP_EXPRESS_API_URL: ${{ secrets.VITE_REACT_APP_EXPRESS_API_URL }}

      - name: Create .nojekyll
        run: echo > dist/.nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  deploy_backend_vercel:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy FastAPI to Vercel
        run: npx vercel deploy --prod --yes --token ${{ secrets.INTEG_TOKEN }}
        working-directory: ./server

  build-and-push-react:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: andreascastello06
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/andreascastello06/ci_cd_react_ynov
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: DockerfileReact
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-fastapi:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: andreascastello06
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/andreascastello06/ci_cd_fastapi_ynov
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/DockerfilePython
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
